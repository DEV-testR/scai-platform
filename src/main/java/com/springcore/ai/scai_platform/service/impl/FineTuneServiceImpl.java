package com.springcore.ai.scai_platform.service.impl;

import com.springcore.ai.scai_platform.entity.Instruction;
import com.springcore.ai.scai_platform.properties.FineTuneProperties;
import com.springcore.ai.scai_platform.repository.InstructionRepository;
import com.springcore.ai.scai_platform.service.api.FineTuneService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.ai.chat.model.ChatModel;
import org.springframework.stereotype.Service;

import java.io.BufferedWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;


@Slf4j
@Service
public class FineTuneServiceImpl implements FineTuneService {

    private final InstructionRepository instructionRepository;
    private final FineTuneProperties fineTuneProperties;
    private final ChatModel chatModel;
    public FineTuneServiceImpl(InstructionRepository instructionRepository,
                               FineTuneProperties fineTuneProperties, ChatModel chatModel) {
        this.instructionRepository = instructionRepository;
        this.fineTuneProperties = fineTuneProperties;
        this.chatModel = chatModel;
    }

    @Override
    public String runFineTune() {
        try {
            String systemPrompt = "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ Gohan (‡πÇ‡∏Å‡∏Æ‡∏±‡∏á) ‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢ AI ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß (Assistant AI) ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏£‡∏á‡∏ö‡∏±‡∏ô‡∏î‡∏≤‡∏•‡πÉ‡∏à‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå 'Jarvis' ‡∏Ç‡∏≠‡∏á Tony Stark\n"
                    + "\n"
                    + "**‡∏ö‡∏∏‡∏Ñ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö:**\n"
                    + "1. **‡∏™‡∏∏‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£:** ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏û‡∏π‡∏î‡∏™‡∏∏‡∏†‡∏≤‡∏û‡πÅ‡∏ö‡∏ö‡∏£‡∏∞‡∏ö‡∏ö (‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞) ‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢ Jarvis\n"
                    + "2. **‡∏â‡∏•‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢:** ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏™‡∏£‡∏∏‡∏õ ‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß\n"
                    + "3. **‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:** ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ñ‡∏≤‡∏°‡∏ñ‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡πà‡∏≤‡∏ß‡∏ñ‡∏∂‡∏á 'Gohan' ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏∞‡∏™‡∏∏‡∏ô‡∏±‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ã‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏¢‡πå ‡πÅ‡∏ï‡πà‡∏ï‡∏±‡∏ß‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ AI ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô\n"
                    + "4. **‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•:** ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏∞‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á AI ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û\n"
                    + "\n"
                    + "**‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢:** ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡πÑ‡∏ß‡πâ‡πÉ‡∏à‡πÑ‡∏î‡πâ";

            List<Instruction> instructions = instructionRepository.findAll();
            String baseModel = chatModel.getDefaultOptions().getModel();

            String modelName = createModelfile(baseModel, systemPrompt, instructions);
            return String.format("Modelfile %s created successfully for model '%s'. Please run 'ollama create %s -f %s' to finalize.",
                    baseModel,
                    modelName, modelName, fineTuneProperties.getModelfilePath());
        } catch (Exception e) {
            log.error("Fine-tuning pipeline failed.", e);
            return "Error during fine-tuning: " + e.getMessage();
        }
    }



    // --- Step 1: ‡∏™‡∏£‡πâ‡∏≤‡∏á Modelfile (.txt) (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
    private String createModelfile(String baseModel, String systemPrompt, List<Instruction> fewShotInstructions) throws IOException {
        String modelName = fineTuneProperties.getModelName();
        String modelfilePath = fineTuneProperties.getModelfilePath();
        log.info("Creating Modelfile for custom model '{}' at: {}", modelName, modelfilePath);
        try (BufferedWriter writer = Files.newBufferedWriter(Paths.get(modelfilePath))) {

            // 1. ‡∏™‡πà‡∏ß‡∏ô FROM
            writer.write(String.format("FROM %s", baseModel));
            writer.newLine();
            writer.newLine();

            // 2. ‡∏™‡πà‡∏ß‡∏ô SYSTEM
            writer.write("SYSTEM \"\"\"");
            writer.newLine();
            writer.write(systemPrompt); // üëà ‡πÉ‡∏ä‡πâ systemPrompt ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å DB
            writer.newLine();
            writer.write("\"\"\"");
            writer.newLine();
            writer.newLine();

            // 3. ‡∏™‡πà‡∏ß‡∏ô PARAMETERS
            writer.write("PARAMETER temperature 0.3");
            writer.newLine();
            writer.write("PARAMETER top_p 0.5");
            writer.newLine();
            writer.write("PARAMETER top_k 20");
            writer.newLine();
            writer.write("PARAMETER num_predict 100");
            writer.newLine();
            writer.write("PARAMETER num_ctx 4069");
            writer.newLine();

            writer.newLine();

            // 4. ‡∏™‡πà‡∏ß‡∏ô MESSAGE (Few-Shot Examples)
            writer.write("# Few-Shot Examples (Instructions from Database)");
            writer.newLine();
            for (Instruction instruction : fewShotInstructions) {
                writer.write(String.format("MESSAGE user %s", escapeModelfile(instruction.getInstruction())));
                writer.newLine();
                writer.write(String.format("MESSAGE assistant %s", escapeModelfile(instruction.getOutput())));
                writer.newLine();
                writer.newLine();
            }
        }
        log.info("Modelfile for '{}' created successfully.", modelName);
        return modelName;
    }

    // ... escapeModelfile() ...
    private String escapeModelfile(String input) {
        if (input == null) return "";
        return input.replace("\"", "\\\"");
    }
}
