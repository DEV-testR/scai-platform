package com.springcore.ai.scai_platform.service;

import com.springcore.ai.scai_platform.config.FineTuneProperties;
import com.springcore.ai.scai_platform.entity.Instruction;
import com.springcore.ai.scai_platform.repository.InstructionRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.BufferedWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;

@Service
public class FineTuneService {

    private static final Logger log = LoggerFactory.getLogger(FineTuneService.class);

    private final InstructionRepository instructionRepository;
    private final FineTuneProperties fineTuneProperties; // <-- Field for the configuration object

    // Constructor Injection: Replace @Value with FineTuneProperties
    @Autowired
    public FineTuneService(InstructionRepository instructionRepository, FineTuneProperties fineTuneProperties) {
        this.instructionRepository = instructionRepository;
        this.fineTuneProperties = fineTuneProperties;
        log.info("FineTuneService initialized. Dataset file: {}", fineTuneProperties.getDatasetFile());
    }

    /**
     * Placeholder method for the fine-tuning workflow.
     */
    public String runFineTune() {
        try {
            List<Instruction> instructions = instructionRepository.findAll();
            if (instructions.isEmpty()) {
                return "No instructions found in the database. Fine-tuning aborted.";
            }

            // 1. Export Data to JSONL format
            createDatasetFile(instructions);

            // 2. Create Python Fine-tune script
            createPythonFineTuneScript();

            // 3. (Placeholder) Execute the fine-tuning script
            // In a real scenario, this involves a ProcessBuilder to call Python script

            return "Fine-tuning data exported and script prepared successfully.";

        } catch (Exception e) {
            log.error("Fine-tuning flow failed.", e);
            return "Error during fine-tuning flow: " + e.getMessage();
        }
    }

    // --- Utility Methods ---

    private void createDatasetFile(List<Instruction> instructions) throws IOException {
        String datasetPath = fineTuneProperties.getDatasetFile(); // Use getter from properties
        log.info("Exporting {} instructions to dataset file: {}", instructions.size(), datasetPath);

        try (BufferedWriter writer = Files.newBufferedWriter(Paths.get(datasetPath))) {
            for (Instruction instruction : instructions) {
                // Simplified JSONL format for Llama 3 fine-tuning (instruction/output)
                String jsonLine = String.format(
                        "{\"instruction\":\"%s\", \"output\":\"%s\"}",
                        escapeJson(instruction.getInstruction()),
                        escapeJson(instruction.getOutput())
                );
                writer.write(jsonLine);
                writer.newLine();
            }
        }
    }

    private void createPythonFineTuneScript() throws IOException {
        String scriptPath = fineTuneProperties.getPythonFile(); // Use getter from properties
        log.info("Generating Python fine-tune script at: {}", scriptPath);

        // This script is a placeholder. In reality, it would use libraries like Hugging Face, PEFT, etc.
        String pythonScript = String.format("""
            # Fine-tuning script generated by SCAI Platform
            import os
            
            DATASET_FILE = "%s"
            
            if not os.path.exists(DATASET_FILE):
                print(f"Error: Dataset file not found at {DATASET_FILE}")
            else:
                print(f"Fine-tuning started using dataset: {DATASET_FILE}")
                # Placeholder for actual fine-tuning logic (e.g., using Llama 3 on Ollama)
                # Actual execution would involve calling external tools or specialized APIs.
                print("Fine-tuning simulation finished successfully.")
            """, fineTuneProperties.getDatasetFile());

        Files.writeString(Paths.get(scriptPath), pythonScript);
    }

    // Simple JSON escaping utility
    private String escapeJson(String input) {
        if (input == null) return "";
        return input.replace("\\", "\\\\").replace("\"", "\\\"");
    }
}